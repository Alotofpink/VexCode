{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ndigital_out_b = DigitalOut(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ----------------------------------------------------------------------------- #\n#                                                                               #             \n# \tProject:        Drivetrain Sensing                                          #\n#   Module:         main.py                                                     #\n#   Author:         VEX                                                         #\n#   Created:        Fri Aug 05 2022                                             #\n#\tDescription:    This example will show all of the available commands        #\n#                   for using the Drivetrain                                    #\n#                                                                               #                                                                          \n#   Configuration:  V5 Speedbot (Drivetrain 4-motor, No Gyro)                   #\n#                                                                               #                                                                          \n# ----------------------------------------------------------------------------- #\n\n# Library imports\nfrom vex import *\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code with 6 motors (3 on each side)\nleft_drive_motor_1 = Motor(Ports.PORT1, GearSetting.RATIO_36_1, True)\nleft_drive_motor_2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1, True)\nleft_drive_motor_3 = Motor(Ports.PORT3, GearSetting.RATIO_36_1, True)\nright_drive_motor_1 = Motor(Ports.PORT11, GearSetting.RATIO_36_1, False)\nright_drive_motor_2 = Motor(Ports.PORT12, GearSetting.RATIO_36_1, False)\nright_drive_motor_3 = Motor(Ports.PORT13, GearSetting.RATIO_36_1, False)\n\n# Group the left and right motors together\nleft_drive = MotorGroup(left_drive_motor_1, left_drive_motor_2, left_drive_motor_3)\nright_drive = MotorGroup(right_drive_motor_1, right_drive_motor_2, right_drive_motor_3)\n\n# Define the drivetrain with the motors and updated gear ratio\ndrivetrain = DriveTrain(left_drive, right_drive, 319.19, 295, 40, MM, 1)\n\n# Define the controller\ncontroller = Controller()\n# Function to control the drivetrain and the piston\ndef control_drivetrain_and_piston():\n    piston_state = False  # Keep track of the piston state (True = activated, False = deactivated)\n    \n    while True:\n        # Get the values from the right analog stick\n        forward_backward = controller.axis2.position()\n        turn = controller.axis1.position()\n\n        # Set the velocities of the left and right motors based on joystick input\n        left_speed = forward_backward + turn\n        right_speed = forward_backward - turn\n\n        left_drive.spin(FORWARD, left_speed, PERCENT)\n        right_drive.spin(FORWARD, right_speed, PERCENT)\n\n        # Check if the B button is pressed to toggle the piston\n        if controller.buttonB.pressing():\n            piston_state = not piston_state  # Toggle the state\n            digital_out_b.set(piston_state)  # Set the digital output\n            wait(300, MSEC)  # Add a small delay to prevent rapid toggling\n\n        # A brief delay to prevent spamming the CPU\n        wait(20, MSEC)\n\n# Start the drivetrain and piston control\ncontrol_drivetrain_and_piston()\n","textLanguage":"python","robotConfig":[{"port":[2],"name":"digital_out_b","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}